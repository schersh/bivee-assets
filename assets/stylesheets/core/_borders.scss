/* =============================================================================
// Border settings & helpers
// ===========================================================================*/

/*doc
---
title: Border settings & helpers
name: borders
category: core
---

Some mixins that allow us to keep our border styles DRY and control them from one place. Use these mixins and placeholders instead of writing your own CSS.

```
.your-selector {
    // add the default border radius
    @extend %base-radius;

    // add a thin border on all sides
    @include border(all, thin);

    // add a thick border on the top and left sides with the highlight color
    @include border(top left, thick, theme(highlight));
}
```

There are also utility classes that allow you to quickly add a border to a container:

```html_example
<div class="border">
    <p>I have borders on all sides!</p>
</div>

<div class="border border-round">
    <p>I have rounded corners!</p>
</div>

<div class="border-top">
    <p>I have borders on just the top!</p>
</div>

<div class="border-bottom border-right">
    <p>I have borders on a couple sides. You can combine border classes to cover as many sides as you like.</p>
</div>

<div class="no-border">
    <p>I have no borders! Even if I normally would.</p>
</div>
```

*/

// @import "libs";
// @import "color";

// Rounded corners
// -----------------------------------------------------------------------------

$base-radius: 3px !default;

@mixin base-radius {
  border-radius: $base-radius;
}

// Border width & style
// -----------------------------------------------------------------------------

$border-w--default: 'thin' !default;

$border-widths: (
    'thin'  : 1px,
    'mid'   : 2px,
    'thick' : 4px,
);

$border-style: solid !default;

$border-sides: top right bottom left;

// get function for border widths
@function border-w($w: $border-w--default) {
    @if (type-of($w) == "number") {
        @return #{$w};
    } @else {
        @return map-get($border-widths, $w);
    }
}

@function border-get-color($color) {
    // if $color is not a hex value
    @if (type-of($color) != "color") {
        // if so, get the theme value for it
        @return theme('border', $color);
    } @else {
        // otherwise, just return the hex
        @return $color;
    }
}

// @debug (border-w('thin'));

// make a standard border/hairline that works with the parent color theme
@mixin border($sides: all, $w: $border-w--default, $color: 'default', $style: $border-style) {
    @if ($sides == all) {
        border: #{border-w($w)} #{$style} #{$color};
    } @else {
        @each $side in $sides {
            border-#{$side}: #{border-w($w)} #{$style} #{border-get-color($color)};
        }
    }
}

// Helper classes
// -----------------------------------------------------------------------------

.border {
    @include border;
}

@each $side in $border-sides {
    .border-#{$side} {
        @include border($side);
    }
}

.no-border { border: none !important; }

.border-round { border-radius: 50%; }
